---
- name: Install Python interpreters
  ansible.builtin.command: "pyenv install {{ item }}"
  args:
    creates: "~/.pyenv/versions/{{ item }}/bin/python"
  loop: "{{ pyenv_python_versions }}"
  tags: python

- name: Get current global version
  ansible.builtin.command: pyenv global
  register: pyenv_global_version
  changed_when: false
  tags: python

- name: Set pyenv_global_active fact
  ansible.builtin.set_fact:
    pyenv_global_active: "{{ pyenv_global_version.stdout_lines | join(' ') | trim() }}"
  tags: python

# - name: Check if 'system' version is available
#   ansible.builtin.command: pyenv versions
#   register: pyenv_versions
#   changed_when: false
#   failed_when: false
#   when: "'system' in pyenv_global"
#   tags: ["python"]
# - name: Remove 'system' from pyenv_global
#   ansible.builtin.set_fact:
#     pyenv_global: "{{ pyenv_global | replace('system', '') | trim() }}"
#   when: "'system' in pyenv_global and 'system' not in pyenv_versions.stdout"
#   tags: ["python"]
- name: Set pyenv global version to '{{ pyenv_global }}'
  ansible.builtin.shell: pyenv global {{ pyenv_global }} && pyenv rehash
  when: "pyenv_global is defined and pyenv_global_active != pyenv_global"
  tags: python

- name: Install Poetry # noqa command-instead-of-module
  ansible.builtin.shell: curl -sSL https://install.python-poetry.org | python3 - --preview
  args:
    creates: "{{ ansible_env.HOME }}/.local/bin/poetry"
  tags: poetry

- name: Check Poetry virtualenvs.in-project config
  ansible.builtin.command: poetry config virtualenvs.in-project
  register: poetry_in_project
  changed_when: false
  tags: poetry

- name: Configure Poetry virtualenvs.in-project
  ansible.builtin.command: poetry config virtualenvs.in-project true
  when: poetry_in_project.stdout != "true"
  tags: poetry

- name: Check Poetry virtualenvs.prefer-active-python config
  ansible.builtin.command: poetry config virtualenvs.prefer-active-python
  register: poetry_prefer_active_python
  changed_when: false
  tags: poetry

- name: Configure Poetry virtualenvs.prefer-active-python
  ansible.builtin.command: poetry config virtualenvs.prefer-active-python true
  when: poetry_prefer_active_python.stdout != "true"
  tags: poetry

- name: Install global Pip packages.
  ansible.builtin.pip:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
    version: "{{ item.version | default(omit) }}"
    executable: "{{ item.executable | default('pip3') }}"
  loop: "{{ pip_packages }}"
